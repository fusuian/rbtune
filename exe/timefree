#!/usr/bin/env ruby

require "timefree"
require "keychain"
require "optparse"

channel  = nil
date     = nil
time     = nil
min      = 30

account  = nil
password = nil

radio_classes = [Radiko, RadikoPremium]
stations = radio_classes.map { |radio| radio::channels.keys }.flatten!

opt = OptionParser.new
opt.version = Rbradi::VERSION
opt.banner += <<"EOS"
 station date time min

    station: #{stations*'|'}
    date:    mm/dd or sun-sat
    time:    HH:MM
    min:     minutes

EOS
opt.on("-o ファイル名", "--output", "出力ファイル [timefree]"){|v| filename=v}
opt.on("--set-authentication", "ラジコプレミアムの認証情報を登録して終了") { $set_authentication = true }
opt.parse! ARGV

kc = KeyChain.new("http://radiko.jp")
if $set_authentication
  begin
    kc.query('Please input your Radiko account and password.')
  rescue RuntimeError => ex
    $stderr.puts ex
  end
  exit
end

raise opt.help unless ARGV.size == 4
channel = ARGV[0]
radio_class = radio_classes.find do |radio|
  radio::channels[channel]
end
raise "Channel #{channel} not found." unless radio_class
filename = channel
ch = radio_class::channels[channel]

begin
  date, time = ARGV[1,2]
  starttime = DateTime.parse("#{date}T#{time}")
  # -dがsun,mon,..,satなど曜日指定だと、当日以外は翌日以降を返すので、
  # 未来だったら前の週の日付を求める (当日だったらそのまま)
  starttime -= 7 if starttime > Date.today + 1
rescue
  raise "Format Error: date #{date} time #{time} "
end


min = ARGV[3].to_f
sec = min*60


begin
  radio=TimeFree.new
  radio.outdir = ENV['RADIODIR'] || '.'
  account, password = kc.account
  res= radio.login account, password
  radio.open
  radio.play channel: ch, from: starttime, sec: sec, filename: filename

rescue Radio::HTTPBadRequestException
  $stderr.puts "HTTPBadRequest: 番組の公開が終了しています"

rescue Radio::HTTPForbiddenException
  $stderr.puts '認証に失敗しました。--set-authentication オプションで正しいアカウントとパスワードを設定してください'

rescue Interrupt
  # do nothing

ensure
  radio.close
end