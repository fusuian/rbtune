#!/usr/bin/env ruby
# coding: utf-8

require "rbtune"
require "keychain"
require "optparse"
require "pp"

filename = nil
quiet    = false

account        = nil
list_stations  = false
fetch_stations = false


opt = OptionParser.new
Version = Rbtune::VERSION
opt.banner += <<EOS
 station [minutes]

 らじる★らじる、radikoなどの日本のラジオ局のIPサイマル放送を聴取・録音する

EOS

opt.on("-o FILE", "--output", "録音するファイル名 (省略時、放送局コード)"){|v| filename = v}
opt.on("-q", "--quiet", "録音時に再生しない" ) { quiet = true }
opt.on("-l", "--list-stations", "放送局リストを表示して終了" ) { list_stations = true }
opt.on("--fetch-stations", "放送局リストを取得して終了" ) { fetch_stations = true }
opt.on("--set-account ACCOUNT", "radikoプレミアムのアカウントを登録して終了") {|v| account = v}
opt.parse! ARGV

kc = KeyChain.new("http://radiko.jp")
case
when account
  RadikoPremium.set_authentication kc, account
  exit

when list_stations
  Station.list_stations
  exit

when fetch_stations
  Station.fetch_stations
  exit

end

case ARGV.size
when 1
  min = 0
when 2
  min = ARGV[1].to_f
else
  puts opt.help
  exit 1
end
channel = ARGV[0].upcase

radio_class, station = Radio.search channel
if radio_class
  puts "#{station.name} (#{radio_class})"
  channel = station.id
else
  puts "放送局コード #{channel} は登録されていません"
  exit 1
end

radio = radio_class.new
radio.outdir = ENV['RADIODIR'] || '.'

begin
  if radio.is_a? RadikoPremium
    account, password = kc.account
    radio.login account, password
  end
  radio.open
  radio.tune channel
  if min > 0
    filename ||= channel
    sec = min*60
    radio.record filename, sec, quiet: quiet
  else
    radio.play
  end

rescue Radio::HTTPForbiddenException
  puts 'radikoプレミアムの認証に失敗しました。--set-account オプションで正しいアカウントとパスワードを設定してください'

rescue Interrupt
  # do nothing

ensure
  radio.close
end
