#!/usr/bin/env ruby
# coding: utf-8
# 日本のラジオ局のサイトから再生（または録音）する

require "rbtune"
require "keychain"
require "optparse"
require "pp"

filename = nil
min      = 30
quiet    = false
wait     = 0

account         = nil
$show_stations = false
$fetch_stations = false


opt = OptionParser.new
Version = Rbtune::VERSION
opt.banner += <<EOS
 station min

    min:     minutes

 らじる★らじる、ラジコなどの日本のラジオ局のサイトから再生（または録音）する

EOS
opt.on("-o ファイル名","--output","録音するファイル名"){|v| filename = v}
opt.on("-m [30]", "--min", Float, "録音時間 (分）"){|v| min = v}
opt.on("-w [0]", "--wait", Float, "録音開始までの待ち時間（秒）")
opt.on("-q", "--quiet", "録音時に再生しない" ) {|v| quiet = true}

opt.on("-s", "--show-stations", "放送局リストを表示して終了" ) { $show_stations = true }
opt.on("-f", "--fetch-stations", "放送局リストを取得して終了" ) { $fetch_stations = true }
opt.on("--set-account ACCOUNT", "ラジコプレミアムのアカウントを登録して終了") {|v| account = v}
opt.parse! ARGV

kc = KeyChain.new("http://radiko.jp")
case
when account
  RadikoPremium.set_authentication kc, account
  exit

when $show_stations
  Station.show_stations
  exit

when $fetch_stations
  Station.fetch_stations
  exit

end

unless ARGV.size == 1
  puts opt.help
  exit 1
end
channel = ARGV[0].upcase

radio_class, station = Radio.search channel
if radio_class
  puts "station: #{station.name}"
  channel = station.id
else
  puts "放送局コード #{channel} は登録されていません"
  exit 1
end
radio = radio_class.new
radio.outdir = ENV['RADIODIR'] || '.'

begin
  if radio.is_a? RadikoPremium
    account, password = kc.account
    radio.login account, password
  end
  radio.open
  puts "area: #{radio.area_id} (#{radio.area_ja}: #{radio.area_en})"
  radio.tune channel
  if filename
    sec = min*60
    radio.record filename, sec, wait: wait, quiet: quiet
  else
    radio.play
  end

rescue Radio::HTTPForbiddenException
  puts 'ラジコプレミアムの認証に失敗しました。--set-account オプションで正しいアカウントとパスワードを設定してください'

rescue Interrupt
  # do nothing

ensure
  radio.close
end
