#!/usr/bin/env ruby
=begin
らじる★らじるの聴き逃しにある番組ページURIから、指定したワードを含むタイトルを抜き出し、URIを調べる。
=end

require "selenium-webdriver"
require "optparse"
require "pp"

uri = "https://www.nhk.or.jp/radio/ondemand/"

$test_mode = false
$show_program_mode = false

opt = OptionParser.new
opt.on('-t', '--test') {|v| $test_mode = true}
opt.on('-s', '--show-programs') {|v| $show_program_mode = true}

def search_program(str, driver)
  elements = driver.find_elements(:css, 'div#ondemandList a')
  programs = elements.map { |e|
    h3, h3span, desc, station = ['h3', 'p', 'p span'].map { |css|
      begin
        el = e.find_element(:css, css)
        el.text
      rescue Selenium::WebDriver::Error::NoSuchElementError
        nil
      end
    }
    desc.sub! /#{station}/, '' if station
    {title: h3, station: station, text: desc, element: e}
  }
  if $show_program_mode
    programs
  else
    programs.filter { |prog| prog['title'] =~ /#{str}/ }
  end
end


def ondemand_url(str, driver)
  elements = driver.find_elements(:css, 'div.progblock li a')
  matches = elements.find_all { |el| el.text =~ /#{str}/ }
  return if matches.empty?
  mh = driver.window_handle

  matches.map do |el|
    driver.switch_to.window mh if driver.window_handle != mh
    h3 = el.find_element :css, 'h3.title'
    element_title = h3.text
    p element_title
    el.click
    wait = Selenium::WebDriver::Wait.new(timeout: 3)
    sleep 1

    handle = driver.window_handles.find {|wh|
      driver.switch_to.window wh
      driver.title =~ /プレーヤー/
    }
    if handle
      player = driver.find_element(:css, 'div.nol_audio_player')
      data_aa = player.attribute('data-aa')
      type, title, station, s, stoe = data_aa.split(';')
      starttime, endtime = stoe.split('_')
      {
        text: element_title,
        title: title,
        station: station,
        start_time: starttime,
        end_time: endtime,
        url: player.attribute('data-hlsurl'),
        aa: data_aa,
      }
    end
  end
end

opt.parse! ARGV
p ARGV
if $show_program_mode
  if ARGV.size == 1
    program = ARGV[0]
  else
    opt.parse ['-h']
    exit 1
  end
elsif ARGV.size == 2
  program, title = ARGV
else
  opt.parse ['-h']
  exit 1
end


begin
  driver = Selenium::WebDriver.for :safari
  driver.navigate.to uri
  wait = Selenium::WebDriver::Wait.new(timeout: 3)

  programs = search_program program, driver
  if programs
    if $show_program_mode
      programs.filter! {|prog| prog[:title] =~ /#{program}/ }
      programs.each {|prog| puts prog[:title]}
    else
      puts '!!!'
      pp programs
      programs.each do |program|
        pp program
        program['element'].click
        wait = Selenium::WebDriver::Wait.new(timeout: 3)
        sleep 1
        ondemand_url(title, driver)
      end
    end
  end
ensure
  driver.quit
end